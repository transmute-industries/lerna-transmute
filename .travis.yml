matrix:
  include:
    #- os: linux
      #dist: trusty
      #sudo: required
      #env:
        #- KUBE_VERSION=v1.8.0
        #- MINIKUBE_INSTALL_BOOL=y
        #- DO_JWT_DL=n
        #- VERBOSITY=100
        #- CHANGE_MINIKUBE_NONE_USER=true
        #- MINIKUBE_VERSION=v0.25.2
        #- USE_VOX=n
        #- USE_WARN=n
        #- EDITOR=cat
        #- MINIKUBE_MEMORY=7777
        #- MINIKUBE_CPU=4
        #- MINIKUBE_DISK=50g
        #- MINIKUBE_DRIVER=none
        #- HELM_INSTALL_DIR=$HOME/.local/bin
        #- HELM_VERSION=v2.8.2
        #- NVM_DIR="$HOME/.nvm"
        #- HELM_SHA256=0521956fa22be33189cc825bb27b3f4178c5ce9a448368b5c81508d446472715
      #language: bash
      #cache:
        #directories:
          #- $HOME/.transmute/bin
          #- $HOME/.local/bin
          #- $HOME/.minikube
          #- $HOME/.nvm
          #- /usr/local
    - os: linux
      dist: trusty
      sudo: required
      env:
        - KUBE_VERSION=v1.9.4
        - MINIKUBE_INSTALL_BOOL=y
        - DO_JWT_DL=n
        - VERBOSITY=100
        - CHANGE_MINIKUBE_NONE_USER=true
        - MINIKUBE_VERSION=v0.25.2
        - USE_VOX=n
        - USE_WARN=n
        - EDITOR=cat
        - MINIKUBE_MEMORY=7777
        - MINIKUBE_CPU=4
        - MINIKUBE_DISK=50g
        - MINIKUBE_DRIVER=none
        - HELM_INSTALL_DIR=$HOME/.local/bin
        - HELM_VERSION=v2.8.2
        - NVM_DIR="$HOME/.nvm"
        - HELM_SHA256=0521956fa22be33189cc825bb27b3f4178c5ce9a448368b5c81508d446472715
      language: bash
    #- os: linux
      #name: v1.9.4-nocache
      #dist: trusty
      #sudo: required
      #env:
        #- KUBE_VERSION=v1.9.4
        #- MINIKUBE_INSTALL_BOOL=y
        #- DO_JWT_DL=n
        #- VERBOSITY=100
        #- CHANGE_MINIKUBE_NONE_USER=true
        #- MINIKUBE_VERSION=v0.25.2
        #- USE_VOX=n
        #- USE_WARN=n
        #- EDITOR=cat
        #- MINIKUBE_MEMORY=7777
        #- MINIKUBE_CPU=4
        #- MINIKUBE_DISK=50g
        #- MINIKUBE_DRIVER=none
        #- HELM_INSTALL_DIR=$HOME/.local/bin
        #- HELM_VERSION=v2.8.2
        #- NVM_DIR="$HOME/.nvm"
        #- HELM_SHA256=0521956fa22be33189cc825bb27b3f4178c5ce9a448368b5c81508d446472715
      #language: bash
    #- os: linux
      #dist: trusty
      #sudo: required
      #env:
        #- KUBE_VERSION=v1.9.0
        #- MINIKUBE_INSTALL_BOOL=y
        #- DO_JWT_DL=n
        #- VERBOSITY=100
        #- CHANGE_MINIKUBE_NONE_USER=true
        #- MINIKUBE_VERSION=v0.25.2
        #- USE_VOX=n
        #- USE_WARN=n
        #- EDITOR=cat
        #- MINIKUBE_MEMORY=7777
        #- MINIKUBE_CPU=4
        #- MINIKUBE_DISK=50g
        #- MINIKUBE_DRIVER=none
        #- HELM_INSTALL_DIR=$HOME/.local/bin
        #- HELM_VERSION=v2.8.2
        #- NVM_DIR="$HOME/.nvm"
        #- HELM_SHA256=0521956fa22be33189cc825bb27b3f4178c5ce9a448368b5c81508d446472715
      #language: bash
    #- os: linux
      #dist: trusty
      #sudo: required
      #env:
        #- KUBE_VERSION=v1.7.5
        #- MINIKUBE_INSTALL_BOOL=y
        #- DO_JWT_DL=n
        #- VERBOSITY=100
        #- CHANGE_MINIKUBE_NONE_USER=true
        #- MINIKUBE_VERSION=v0.25.2
        #- USE_VOX=n
        #- USE_WARN=n
        #- EDITOR=cat
        #- MINIKUBE_MEMORY=7777
        #- MINIKUBE_CPU=4
        #- MINIKUBE_DISK=50g
        #- MINIKUBE_DRIVER=none
        #- HELM_INSTALL_DIR=$HOME/.local/bin
        #- HELM_VERSION=v2.8.2
        #- NVM_DIR="$HOME/.nvm"
        #- HELM_SHA256=0521956fa22be33189cc825bb27b3f4178c5ce9a448368b5c81508d446472715
      #language: bash
    #- os: linux
      #dist: trusty
      #sudo: required
      #env:
        #- KUBE_VERSION=v1.7.5
        #- MINIKUBE_INSTALL_BOOL=y
        #- DO_JWT_DL=n
        #- VERBOSITY=100
        #- CHANGE_MINIKUBE_NONE_USER=true
        #- MINIKUBE_VERSION=v0.25.2
        #- USE_VOX=n
        #- USE_WARN=n
        #- EDITOR=cat
        #- MINIKUBE_MEMORY=7777
        #- MINIKUBE_CPU=4
        #- MINIKUBE_DISK=50g
        #- MINIKUBE_DRIVER=none
        #- HELM_INSTALL_DIR=$HOME/.local/bin
        #- HELM_VERSION=v2.8.2
        #- NVM_DIR="$HOME/.nvm"
        #- HELM_SHA256=0521956fa22be33189cc825bb27b3f4178c5ce9a448368b5c81508d446472715
      #language: bash
      #cache:
        #directories:
          #- $HOME/.transmute/bin
          #- $HOME/.local/bin
          #- $HOME/.minikube
          #- $HOME/.nvm
          #- /usr/local
#    - os: linux
#      name: v1.9.4-fail
#      dist: trusty
#      sudo: required
#      env:
#        - KUBE_VERSION=v1.9.4
#        - RUN_LERNA=n
#        - MINIKUBE_INSTALL_BOOL=y
#        - DO_JWT_DL=n
#        - VERBOSITY=100
#        - CHANGE_MINIKUBE_NONE_USER=true
#        - MINIKUBE_VERSION=v0.25.2
#        - USE_VOX=n
#        - USE_WARN=n
#        - EDITOR=cat
#        - MINIKUBE_MEMORY=7777
#        - MINIKUBE_CPU=4
#        - MINIKUBE_DISK=50g
#        - MINIKUBE_DRIVER=none
#        - HELM_INSTALL_DIR=$HOME/.local/bin
#        - HELM_VERSION=v2.8.2
#        - NVM_DIR="$HOME/.nvm"
#        - HELM_SHA256=0521956fa22be33189cc825bb27b3f4178c5ce9a448368b5c81508d446472715
#      language: bash
    #- os: linux
      #name: v1.10.0-nocache
      #dist: trusty
      #sudo: required
      #env:
        #- KUBE_VERSION=v1.10.0
        #- MINIKUBE_INSTALL_BOOL=y
        #- DO_JWT_DL=n
        #- VERBOSITY=100
        #- CHANGE_MINIKUBE_NONE_USER=true
        #- MINIKUBE_VERSION=v0.25.2
        #- USE_VOX=n
        #- USE_WARN=n
        #- EDITOR=cat
        #- MINIKUBE_MEMORY=7777
        #- MINIKUBE_CPU=4
        #- MINIKUBE_DISK=50g
        #- MINIKUBE_DRIVER=none
        #- HELM_INSTALL_DIR=$HOME/.local/bin
        #- HELM_VERSION=v2.8.2
        #- NVM_DIR="$HOME/.nvm"
        #- HELM_SHA256=0521956fa22be33189cc825bb27b3f4178c5ce9a448368b5c81508d446472715
      #language: bash
#    - os: osx
#      osx_image: xcode8.3
#      language: bash
#      cache:
#        directories:
#        - $HOME/.minikube
#        - $HOME/.transmute
#        - $HOME/.kube
#      env:
#        - CHANGE_MINIKUBE_NONE_USER=true
#        - MINIKUBE_VERSION=v0.25.2
#        - USE_VOX=n

before_script:
# Download kubectl, which is a requirement for using minikube.
# Download minikube.
-  sha256sum packages/transmute-cli/src/index.js
-  grep 'init' packages/transmute-cli/src/index.js
-  pwd
- |
    if [[ "$TRAVIS_COMMIT" != "$(git rev-parse HEAD)" ]]; then
      echo "Commit $(git rev-parse HEAD) doesn't match expected commit $TRAVIS_COMMIT"
    fi
- git log -n1
- git status
- if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then bash .ci/linux_before_install.sh; fi
  #- if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then sh .ci/mac_before_script.sh; fi
- bash -l -c "echo PATH=$HOME/.transmute/bin:$PATH >> $HOME/.bashrc"
- bash -l -c "echo PATH=$HOME/.local/bin:$PATH >> $HOME/.bashrc"
  # This appears to be necessary for the time being otgherwise minikube fails to start if it is only present in the ~/.transmute/bin directory
- if [[ ! -e "/usr/local/bin/minikube" && "$MINIKUBE_INSTALL_BOOL" == 'y' ]]; then curl -Lo minikube https://storage.googleapis.com/minikube/releases/$MINIKUBE_VERSION/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/; fi
- mkdir -p $HOME/.local/bin
- cd $HOME; rm -Rf .transmute; mkdir -p .transmute/git; cd .transmute/git; ln -s $TRAVIS_BUILD_DIR transmute
- cd $TRAVIS_BUILD_DIR
- TRANSMUTE_RELEASE=$TRAVIS_BRANCH bash -l ./bootstrap
- export PATH=$HOME/.transmute/bin:$PATH
- cd $TRAVIS_BUILD_DIR/packages/transmute-cli
- bash -l -c "npm i"
- bash -l -c "npm run build"
- bash -l -c "npm i -g"
- cd $TRAVIS_BUILD_DIR
  #- printenv
  #- bash -l -c "printenv"
- bash -l -c "npm i"
  # Spin up minikube
  # Travis is acting funny again and minikube is not spinning up
-  sha256sum packages/transmute-cli/src/index.js
-  grep 'init' packages/transmute-cli/src/index.js
-  pwd
- git log -n1
- git status
- if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then bash -l -c "transmute k8s provision --minikube --vmdriver none"; fi
  # These lines are for testing against minikube raw when the above line acts up
  # These will pass
#- if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then bash -l -c "minikube start --vm-driver=none"; fi
#- if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then bash -l -c "minikube start  --kubernetes-version v1.10.0 --disk-size 50g --cpus 4 --memory 7777 --vm-driver=none"; fi
# This one represents the problem
#- if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then bash -l -c "minikube start  --kubernetes-version v1.10.0 --disk-size 50g --bootstrapper kubeadm --cpus 4 --memory 7777 --vm-driver=none"; fi
- sleep 8
- minikube update-context
  # End minikube section
  # Initialization section begins
- if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then bash -l -c "yes y|transmute k8s init --minikube"; fi

script:
- bash -l -c "lerna bootstrap"
- sleep 8
- bash -l -c "kubectl get pods --all-namespaces"
- bash -l -c "kubectl get svc --all-namespaces"
- bash -l -c "kubectl describe pod $(kubectl get pod --all-namespaces|grep gateway-kong-migrations|awk '{print $2}')"
- bash -l -c "kubectl describe pod $(kubectl get pod --all-namespaces|grep -v gateway-kong-migrations|grep gateway-kong|awk '{print $2}')"
  # Lerna
- if [[ "$RUN_LERNA" == 'y' ]]; then bash -l -c 'echo run lerna'; fi
- if [[ "$RUN_LERNA" == 'y' ]]; then bash -l -c "lerna run --scope transmute-framework truffle:test"; fi
- if [[ "$RUN_LERNA" == 'y' ]]; then bash -l -c "lerna run --scope transmute-framework truffle:migrate"; fi
- if [[ "$RUN_LERNA" == 'y' ]]; then bash -l -c "lerna run --scope transmute-framework test"; fi
- if [[ "$RUN_LERNA" == 'y' ]]; then bash -l -c "lerna run --scope transmute-framework test:report"; fi
