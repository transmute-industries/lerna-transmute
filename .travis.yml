matrix:
  include:
    - os: linux
      dist: trusty
      sudo: required
      env:
        - DO_JWT_DL=n
        - CHANGE_MINIKUBE_NONE_USER=true
        - MINIKUBE_VERSION=v0.25.2
        - USE_VOX=n
        - USE_WARN=n
        - MINIKUBE_MEMORY=7777
        - MINIKUBE_CPU=4
        - MINIKUBE_DRIVER=none
        - HELM_INSTALL_DIR=$HOME/.local/bin
        - HELM_VERSION=v2.8.2
        - NVM_DIR="$HOME/.nvm"
        - KUBE_VERSION=v1.9.0
        - HELM_SHA256=0521956fa22be33189cc825bb27b3f4178c5ce9a448368b5c81508d446472715
      language: bash
      cache:
        directories:
        - $HOME/.local/bin
        - $HOME/.transmute
        - $HOME/.minikube
        - $HOME/.kube
        - /usr/local
        - .git
    #- os: osx
      #osx_image: xcode8.3
      #language: bash
      #cache:
        #directories:
        #- $HOME/.minikube
        #- $HOME/.transmute
        #- $HOME/.kube
      #env:
        #- CHANGE_MINIKUBE_NONE_USER=true
        #- MINIKUBE_VERSION=v0.25.2
        #- USE_VOX=n

before_script:
# Download kubectl, which is a requirement for using minikube.
# Download minikube.
- if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sh .ci/linux_before_install.sh; fi
- if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then sh .ci/mac_before_script.sh; fi
- bash -l -c "echo PATH=$HOME/.transmute/bin:$PATH >> $HOME/.bashrc"
- bash -l -c "echo PATH=$HOME/.local/bin:$PATH >> $HOME/.bashrc"
- if [[ ! -e "/usr/local/bin/kubectl" ]]; then curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/$KUBE_VERSION/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/; fi
- if [[ ! -e "/usr/local/bin/minikube" ]]; then curl -Lo minikube https://storage.googleapis.com/minikube/releases/$MINIKUBE_VERSION/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/; fi
- if [[ ! -e "$HOME/.local/bin/helm" ]]; then sh .ci/gethelm; fi
  #- bash -l -c "which helm"
- echo "$HELM_SHA256 $HOME/.local/bin/helm" > /tmp/testhelm && sha256sum -c /tmp/testhelm && rm /tmp/testhelm
- if [[ ! -e "$HOME/.local/bin/nsenter" ]]; then .ci/ubuntu-compile-nsenter.sh; fi
- sudo cp $HOME/.local/bin/nsenter /usr/bin/nsenter
- bash -l ./bootstrap
- if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then bash -l transmute help; fi
- if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then bash -l transmute k8s provision --minikube; fi
  #- if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then bash -l transmute k8s init --minikube; fi
  #- minikube start --vm-driver=none --kubernetes-version=$KUBE_VERSION
# Fix the kubectl context, as it's often stale.
- minikube update-context

script:
  #- PATH=$HOME/.transmute/bin:$PATH which kubectl
  #- PATH=$HOME/.transmute/bin:$PATH which minikube
  #- bash -l -c "which npm"
  #- bash -l -c "which node"
  #- bash -l -c "node -v"
  #- bash -l -c "npm -v"
  #- bash -l -c "which ngrok"
  #- bash -l -c "which helm"
  #- bash -l -c "which nsenter"
# Wait for Kubernetes to be up and ready.
- JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1; done
- if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then bash -l .ci/linux_script; fi
- if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then sh .ci/mac_script.sh; fi
  #- bash -l -c "kubectl get services"
  #- bash -l -c "kubectl get pods"
- bash -l -c "npm i"
  #- pwd
- cd $TRAVIS_BUILD_DIR
- if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then bash -l ./scripts/spin-up-minikube.sh; fi
