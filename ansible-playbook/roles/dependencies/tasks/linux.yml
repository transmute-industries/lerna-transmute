---
- name: Installing packages
  package:
    name: "{{ item }}"
    state: present
  become: yes
  with_items:
    - libncurses5-dev
    - libslang2-dev
    - gettext
    - zlib1g-dev
    - libselinux1-dev
    - debhelper
    - lsb-release
    - pkg-config
    - po-debconf
    - autoconf
    - automake
    - autopoint
    - libtool
    - bison
    - curl
    - git
    - socat
    - jq

- name: Installing crictl
  block:
    - name: Creating temporary directory for crictl
      tempfile:
        state: directory
        suffix: crictl
      register: crictl_tmp
    - name: Downloading crictl
      get_url:
        url: "https://github.com/kubernetes-sigs/cri-tools/releases/download/{{ transmute_critools_version }}/crictl-{{ transmute_critools_version }}-{{ ansible_system | lower }}-amd64.tar.gz"
        dest: "{{ crictl_tmp.path }}/crictl.tar.gz"
        remote_src: yes
      register: crictl_tmp_archive
    - name: Installing crictl
      copy:
        src: "{{ crictl_tmp_archive.dest }}"
        dest: /usr/local/bin/crictl
        remote_src: yes
        owner: 0
        group: 0
        mode: 0755
      become: yes

- name: Installing nsenter
  block:
    - name: Creating temporary directory for nsenter
      tempfile:
        state: directory
        suffix: nsenter
      register: nsenter_tmp
    - name: Unarchiving nsenter
      unarchive:
        src: https://mirrors.edge.kernel.org/pub/linux/utils/util-linux/v2.32/util-linux-2.32.1.tar.gz
        dest: "{{ nsenter_tmp.path }}"
        remote_src: yes
    - name: Building nsenter
      shell: ./autogen.sh && ./configure && make nsenter
      args:
        chdir: "{{ nsenter_tmp.path }}/util-linux-2.32.1"
    - name: Installing nsenter
      copy:
        src: "{{ nsenter_tmp.path }}/util-linux-2.32.1/nsenter"
        dest: /usr/local/bin/nsenter
        remote_src: yes
        owner: 0
        group: 0
        mode: 0755
      become: yes

- name: Installing kubectl
  get_url:
    url: "https://storage.googleapis.com/kubernetes-release/release/{{ transmute_kube_version }}/bin/{{ ansible_system | lower }}/amd64/kubectl"
    dest: /usr/local/bin/kubectl
    remote_src: yes
    mode: 0755
    owner: 0
    group: 0
  become: yes

- block:
  - name: Installing Minikube
    get_url:
      url: "https://storage.googleapis.com/minikube/releases/{{ transmute_minikube_version }}/minikube-{{ ansible_system | lower }}-amd64"
      dest: /usr/local/bin/minikube
      remote_src: yes
      mode: 0755
      owner: 0
      group: 0
    become: yes
  - shell: minikube config set WantUpdateNotification false

- name: Installing Helm
  shell: >
    HELM_INSTALL_DIR=/usr/local/bin
    warn=False
    curl -Lo get_helm.sh "https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get"
    chmod +x ./get_helm.sh
    ./get_helm.sh --version "$TRANSMUTE_HELM_VERSION"
  args:
    chdir: "{{ ansible_env.HOME }}/.transmute/bin"

# - name: install kubectl
#   get_url:
#     url: "https://storage.googleapis.com/kubernetes-release/release/{{ transmute_kube_version }}/bin/linux/amd64/kubectl"
#     dest: "/usr/local/bin/kubectl"
#     remote_src: yes
#     mode: 0755
#     owner: 0
#     group: 0
#   become: yes

# - name: install minikube
#   get_url:
#     url: "https://storage.googleapis.com/minikube/releases/{{ transmute_minikube_version }}/minikube-linux-amd64"
#     dest: "/usr/local/bin/minikube"
#     remote_src: yes
#     mode: 0755
#     owner: 0
#     group: 0
#   become: yes

# - name: create temporary directory HELM_TMP
#   tempfile:
#     state: directory
#     suffix: HELM_TMP
#   register: tmp

# - name: Unarchive helm
#   unarchive:
#     src: "https://storage.googleapis.com/kubernetes-helm/helm-v2.11.0-linux-amd64.tar.gz"
#     dest: "{{ tmp.path }}"
#     remote_src: yes

# - name: Copy helm
#   copy:
#     src: "{{ tmp.path }}/linux-amd64/helm"
#     dest: "{{ ansible_env.HOME }}/.transmute/bin/helm"
#     remote_src: yes
#     mode: 0750
