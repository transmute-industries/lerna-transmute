---
- name: Initialize helm_release_status
  set_fact:
    helm_release_status: "{{ helm_release_status | default({}) }}"

- name: Checking Helm release status of Kong
  shell: helm list --deployed gateway
  register: helm_release_status_kong_check
  changed_when: no
  check_mode: no

- name: Setting helm_release_status.kong
  set_fact:
    helm_release_status: "{{ helm_release_status | combine( { 'kong': helm_release_status_kong_check }, recursive=True ) }}"
  changed_when: no
  when: helm_release_status_kong_check

- name: Getting Kong service details
  block:
    - name: Setting kong_admin_url
      shell: minikube service gateway-kong-admin --url | sed "s|http://|https://|"
      register: kong_admin_url
      changed_when: no
      check_mode: no
    - name: Setting kong_admin_host
      shell: minikube service gateway-kong-admin --format "{{ '{{' }} .IP {{ '}}' }}"
      register: kong_admin_host
      changed_when: no
      check_mode: no
    - name: Setting kong_admin_port
      shell: kubectl get service gateway-kong-admin -o json | jq -r ".spec.ports[0].nodePort"
      register: kong_admin_port
      changed_when: no
      check_mode: no
    - name: Setting kong_proxy_url
      shell: minikube service gateway-kong-proxy --url
      register: kong_proxy_url
      changed_when: no
      check_mode: no
    - name: Setting kong_proxy_port
      shell: kubectl get service gateway-kong-proxy -o json | jq -r ".spec.ports[0].nodePort"
      register: kong_proxy_port
      changed_when: no
      check_mode: no
  when: helm_release_status.kong

- name: Waiting for Kong response
  uri:
    url: "https://{{ kong_admin_host.stdout }}:{{ kong_admin_port.stdout }}"
    status_code: 200
    validate_certs: no
  register: waiting_for_kong_response_request
  retries: 60
  delay: 5
  until: waiting_for_kong_response_request.status == 200
  when: helm_release_status.kong

- name: Checking Helm release status of Ganache
  shell: helm list --deployed ganache
  register: helm_release_status_ganache_check
  changed_when: no
  check_mode: no

- name: Setting helm_release_status.ganache
  set_fact:
    helm_release_status: "{{ helm_release_status | combine( { 'ganache': helm_release_status_ganache_check }, recursive=True ) }}"
  changed_when: no
  when: helm_release_status_ganache_check

- name: Setting ganache_cluster_ip
  shell: kubectl get service ganache -o json | jq -r ".spec.clusterIP"
  register: ganache_cluster_ip
  changed_when: no
  check_mode: no
  when: helm_release_status.ganache

- name: Adding Ganache to Kong APIs
  block:
    - uri:
        url: "{{ kong_admin_url.stdout }}/apis/"
        method: POST
        body: "name=ganache&hosts=ganache.transmute.minikube&upstream_url=http://{{ ganache_cluster_ip.stdout }}:8545/"
        status_code: 201
        validate_certs: no
      register: adding_ganache_to_kong_apis
      ignore_errors: yes
    - fail:
        msg: "The execution has failed because of errors."
      ignore_errors: yes
      when:
        - adding_ganache_to_kong_apis.status != 201
        - adding_ganache_to_kong_apis.status != 409
  when:
    - helm_release_status.kong
    - helm_release_status.ganache

- name: Checking if Ganache is available through Kong proxy
  uri:
    url: "http://ganache.transmute.minikube:{{ kong_proxy_port.stdout }}"
    method: POST
    body: '{"jsonrpc":"2.0","method":"web3_clientVersion","params":[],"id":68}'
    body_format: json
    status_code: 200
  register: checking_ganache_availability_through_kong_proxy
  delay: 60
  retries: 5
  until: checking_ganache_availability_through_kong_proxy.status == 200
  when:
    - helm_release_status.kong
    - helm_release_status.ganache

- name: Checking Helm release status of IPFS
  shell: helm list --deployed decentralized-storage
  register: helm_release_status_ipfs_check
  changed_when: no
  check_mode: no

- name: Setting helm_release_status.ipfs
  set_fact:
    helm_release_status: "{{ helm_release_status | combine( { 'ipfs': helm_release_status_ipfs_check }, recursive=True ) }}"
  changed_when: no
  when: helm_release_status_ipfs_check

- name: Setting ipfs_cluster_ip
  shell: kubectl get service decentralized-storage-ipfs -o json | jq -r ".spec.clusterIP"
  register: ipfs_cluster_ip
  changed_when: no
  check_mode: no
  when: helm_release_status.ipfs

- name: Adding IPFS to Kong APIs
  block:
    - uri:
        url: "{{ kong_admin_url.stdout }}/apis"
        method: POST
        body: "name=ipfs&hosts=ipfs.transmute.minikube&upstream_url=http://{{ ipfs_cluster_ip.stdout }}:5001/"
        status_code: 201
        validate_certs: no
      register: adding_ipfs_to_kong_apis_request
      ignore_errors: yes
    - fail:
        msg: "The execution has failed because of errors."
      when:
        - adding_ipfs_to_kong_apis_request.status != 201
        - adding_ipfs_to_kong_apis_request.status != 409
  when:
    - helm_release_status.kong
    - helm_release_status.ipfs
    - ipfs_cluster_ip

- block:
    - name: Adding CORS plugin to IPFS Kong API
      uri:
        url: "{{ kong_admin_url.stdout }}/apis/ipfs/plugins"
        method: POST
        body: "name=cors&config.origins=*&config.methods=GET, PUT, POST"
        status_code: 201
        validate_certs: no
      register: adding_cors_plugin_to_ipfs_kong_api_request
      ignore_errors: yes
    - fail:
        msg: "The execution has failed because of errors."
      when:
        - adding_cors_plugin_to_ipfs_kong_api_request.status != 201
        - adding_cors_plugin_to_ipfs_kong_api_request.status != 409
    - name: Getting IPFS API ID from IPFS API
      uri:
        url: "http://ipfs.transmute.minikube:{{ kong_proxy_port.stdout }}/api/v0/id"
        method: GET
      register: ipfs_api_id
      retries: 200
      delay: 1
      when:
        - (adding_ipfs_to_kong_apis_request.status == 200) or
          (adding_ipfs_to_kong_apis_request.status == 409)
  when:
    - helm_release_status.kong
    - helm_release_status.ipfs
    - adding_ipfs_to_kong_apis_request

- name: Ensuring transmute-config directories exist
  file:
    path: "{{ ansible_env.HOME }}/.transmute/git/transmute/packages/{{ item }}/src/transmute-config"
    state: directory
    recurse: yes
  with_items:
    - "transmute-framework"
    - "transmute-dashboard"

- name: Adding Transmute Framework template
  template:
    src: framework.env.json.j2
    dest: "{{ ansible_env.HOME }}/.transmute/git/transmute/packages/transmute-framework/src/transmute-config/env.json"

- name: Adding Transmute Dashboard template
  template:
    src: dashboard.env.json.j2
    dest: "{{ ansible_env.HOME }}/.transmute/git/transmute/packages/transmute-dashboard/src/transmute-config/env.json"

- name: Ensuring export of TRANSMUTE_ENV environment variable
  lineinfile:
    path: "{{ ansible_env.HOME }}/.bashrc"
    state: present
    line: "export {{ item.var }}={{ item.value }}"
  with_items:
    - var: "TRANSMUTE_ENV"
      value: "minikube"
