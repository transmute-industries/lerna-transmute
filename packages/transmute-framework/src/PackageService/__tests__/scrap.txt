// import { getSetupAsync } from "../../__mocks__/setup";

// import { W3, Relic, PackageService, Utils } from "../../transmute-framework";

// import * as TransmuteCrypto from "transmute-crypto";



// /**
//  * PackageService test
//  */
// describe("PackageService", () => {
//   let relic: any;
//   let accounts: string[];
//   let ps: PackageService;

//   beforeAll(async () => {
//     let setup = await getSetupAsync();
//     relic = setup.relic;
//     // accounts = setup.accounts;
//     // let packageManager = await PackageService.New(accounts[0]);
//     // ps = new PackageService(packageManager, setup.eventStoreAdapter);
//   });

//   // it("Static NewContract creates a new contract...", async () => {
//   //   expect(ps.packageManager.address).toBeDefined();
//   // });

//   test("new users can publish packages", async () => {
//     // console.log('happy', TransmuteCrypto)

//     // user creates key pair
//     // let sodium = await TransmuteCrypto.getSodium();
//     // let alice = sodium.crypto_box_keypair();
//     // let alicePrivKeyHex = '0x' + sodium.to_hex(alice.privateKey)
//     // console.log(alicePrivKeyHex)
//     // let aliceAddress = Utils.privateKeyHexToAddress(alicePrivKeyHex)
//     // console.log(aliceAddress)


//     // user registers new key pair with contract
//     // relic.web3.eth.accounts.privateKeyToAccount();
//     // let updatedAccount = await relic.getAccounts();
//     // console.log(relic.web3.eth)

//     // user publishes package to contract



//   });
// });


// import { getSetupAsync } from "../../__mocks__/setup";

// import { W3, Relic, Utils } from "../../transmute-framework";

// import * as TransmuteCrypto from "transmute-crypto";

// const util = require("ethereumjs-util");

// const Tx = require("ethereumjs-tx");

// /**
//  * Basic Tests test
//  */
// describe("Basic Tests", () => {
//   let relic: any;
//   let accounts: string[];

//   beforeAll(async () => {
//     relic = new Relic({
//       providerUrl: "http://localhost:8545"
//     });

//     accounts = await relic.getAccounts();
//   });

//   const fundAddressFromRelic = async toAddress => {
//     let data = await relic.web3.eth.sendTransaction({
//       from: accounts[0],
//       to: toAddress,
//       value: 150000000000000000
//     });
//     let bal = await relic.getBalance(toAddress);
//     // console.log(bal);
//   };

//   const signTx = async privateKey => {
//     let rawTx = {
//       nonce: "0x00",
//       gasLimit: "0x5410",
//       to: "0x0000000000000000000000000000000000000000",
//       value: "0x00",
//       data: Utils.bufferToHex(new Buffer("hello"))
//     };
//     console.log(Utils.toAscii(rawTx.data));
//     let tx = new Tx(rawTx);
//     tx.sign(privateKey);
//     let serializedTx = tx.serialize();
//     return new Promise((resolve, reject) => {
//       relic.web3.eth.sendRawTransaction("0x" + serializedTx.toString("hex"), function(err, hash) {
//         if (!err) {
//           // console.log(hash);
//           resolve(hash);
//         } else {
//           console.log(err);
//         }
//       });
//     });
//   };

//   test("simple transaction signing... without web3 1.0...", async () => {
//     // console.log('happy', TransmuteCrypto)

//     // user creates key pair
//     let sodium = await TransmuteCrypto.getSodium();
//     let alice = sodium.crypto_box_keypair();
//     let alicePrivKeyHex = sodium.to_hex(alice.privateKey);
//     // console.log(alicePrivKeyHex);
//     let privateKey = new Buffer(alicePrivKeyHex, "hex");
//     let aliceAddress = "0x" + sodium.to_hex(util.privateToAddress(privateKey));

//     await fundAddressFromRelic(aliceAddress);

//     await signTx(privateKey);

//     // user registers new key pair with contract
//     // relic.web3.eth.accounts.privateKeyToAccount(sodium.to_hex(alice.privateKey));
//     // let updatedAccount = await relic.getAccounts();
//     // console.log(relic.web3.eth)

//     // user publishes package to contract
//   });
// });



import * as TransmuteCrypto from "transmute-crypto";
import {
  W3,
  Relic,
  Utils,
  Store,
  EventStoreAdapter,
  PackageManager,
  InternalEventTypes,
  EventTransformer,
  IFSA
} from "../../../transmute-framework";

const RPC_HOST = "http://localhost:8545";

// - User purchases a subscription with Stripe.
// - User address is paired with subscription tier.
// - System creates a package manager contract for user address.
// - System monitors packages deployed and utilization.
// - User can issue delete packages to clean up space.

const generateTestWallets = async (num: number) => {
  const sodium = await TransmuteCrypto.getSodium();
  let testWallets: any = [];
  for (let i = 0; i < num; i++) {
    const alice = sodium.crypto_box_keypair();
    const unPrefixedPrivateKeyHexString = sodium.to_hex(alice.privateKey);
    let address = Utils.privateKeyHexToAddress("0x" + unPrefixedPrivateKeyHexString);
    testWallets.push({
      address: "0x" + sodium.to_hex(address),
      privateKey: "0x" + unPrefixedPrivateKeyHexString
    });
  }
  return testWallets;
};

const sleep = (seconds: number) => {
  return new Promise((resolve, reject) => {
    setTimeout(resolve, seconds * 1000);
  });
};

const Storage = require("node-storage");

const bs58 = require("bs58");

const ipfsAdapter = require("transmute-adapter-ipfs");
const nodeStorageAdapter = require("transmute-adapter-node-storage");

let ipfs = ipfsAdapter.getStorage();

const db = new Storage("./read_model_storage");
const nodeStorageDB = nodeStorageAdapter.getStorage();

const readModelAdapter = {
  getItem: id => {
    return JSON.parse(db.get(id));
  },
  setItem: (id, value) => {
    return db.put(id, JSON.stringify(value));
  }
};

const eventStoreAdapter = new EventStoreAdapter({
  I: {
    keyName: "multihash",
    adapter: ipfsAdapter,
    db: ipfs,
    readIDFromBytes32: bytes32 => {
      return bs58.encode(new Buffer("1220" + bytes32.slice(2), "hex"));
    },
    writeIDToBytes32: id => {
      return "0x" + new Buffer(bs58.decode(id).slice(2)).toString("hex");
    }
  }
});

/**
 * PackageManager spec
 */
describe("PackageManager", () => {
  const allWalletBalancesAre = async (relic, testWallets, expectedBalanceWei: number) => {
    testWallets.forEach(async wallet => {
      let bal = await relic.getBalance(wallet.address);
      expect(bal).toBe(expectedBalanceWei);
    });
  };
  const fundWallets = async (relic, defaultAccount, testWallets, amountWei: number) => {
    testWallets.forEach(async wallet => {
      let txhash = await relic.sendWei(defaultAccount, wallet.address, amountWei);
      expect(txhash).toBeDefined();
    });
  };

  test("happy path", async () => {
    let relic = new Relic({
      providerUrl: RPC_HOST
    });
    // create and fund some local wallets
    let defaultAccount = (await relic.getAccounts())[0];
    let testWallets = await generateTestWallets(3);
    await allWalletBalancesAre(relic, testWallets, 0);
    await fundWallets(relic, defaultAccount, testWallets, 150000000000000000);
    await sleep(2);
    await allWalletBalancesAre(relic, testWallets, 150000000000000000);
    let firstWallet = testWallets[0].privateKey.replace("0x", "");
    const wallet = TransmuteCrypto.getWalletFromPrivateKey(firstWallet);

    // initialize relic with a local (funded) wallet
    relic = new Relic({
      providerUrl: RPC_HOST,
      wallet
    });
    let accounts = await relic.getAccounts();
    expect(accounts.length).toBe(1);
    W3.Default = relic.web3;

    // create a new package manager contract
    let newPM = await PackageManager.New(W3.TX.txParamsDefaultDeploy(testWallets[0].address), {
      _multisig: testWallets[0].address
    });

    // ensure the wallet is the owner of the contract
    let pmOwner = await newPM.owner();
    expect(pmOwner).toBe(testWallets[0].address);

    let localWallets = testWallets.map(wallet => {
      return wallet.address;
    });

    let event = await Store.writeFSA(newPM, eventStoreAdapter, relic.web3, pmOwner, {
      type: "SUBSCRIPTION_CHANGE",
      payload: {
        key: "subscription",
        value: "T1"
      },
      meta: {}
    });

    // set the package manager whitelist
    let reciept = await newPM.setWhitelist(
      localWallets,
      W3.TX.txParamsDefaultDeploy(testWallets[0].address)
    );
    let events = EventTransformer.getFSAsFromReceipt(reciept);
    // console.log(reciept)
    // console.log(events)

    // the white list has been set to the local wallets.
    let pmWhitelist = await newPM.getWhitelist();
    expect(pmWhitelist).toEqual(localWallets);
    // console.log(pmWhitelist)
    // console.log("newPM: ", newPM);

    // a white listed wallet can write a publish event
    event = await Store.writeFSA(newPM, eventStoreAdapter, relic.web3, pmOwner, {
      type: "PACKAGE_PUBLISHED",
      payload: {
        name: "helloWorld",
        version: "0.0.1",
        multihash: "QmYG8q3btc4xb3GhtdQzwdxtuZiAoxGKNS9sMBrqDKNws2"
      },
      meta: {
        adapter: "I"
      }
    });
    // console.log('what is event: ', event)
    events = await Store.readFSAs(newPM, eventStoreAdapter, relic.web3, pmOwner)
    console.log(events)

    // ipfs.block.stat(cid, (err, stats) => {
    //   if (err) {
    //     throw err
    //   }
    //   console.log(stats)
    //   // Logs:
    //   // {
    //   //   key: QmQULBtTjNcMwMr4VMNknnVv3RpytrLSdgpvMcTnfNhrBJ,
    //   /    size: 3739
    //   // }
    // })

  });
});
