#!/bin/bash
set -eu
this_cluster_name=$1
orig_pwd=$(pwd)

: ${VOYAGER_PROVIDER:='baremetal'}
: ${TRANSMUTE_DIR:=$HOME/.transmute}
: ${TRANSMUTE_BIN:=$TRANSMUTE_DIR/bin}
: ${TRANSMUTE_REPO:=$TRANSMUTE_DIR/git/transmute}
: ${VERBOSITY:=0}

export PATH=$HOME/.transmute/bin:$PATH
export PATH=$HOME/.local/bin:$PATH
export TRANSMUTE_ENV=minikube
export NVM_DIR="$HOME/.nvm"

exiter () {
  echo 'Received problem bailing out!'
  exit 1
}

trap exiter EXIT

squawk () {
  # This function simplifies error reporting and verbosity
  # call it by preceding your message with a verbosity level
  # e.g. `squawk 3 "This is a squawk"`
  # if the current verbosity level is greater than or equal to
  # the number given then this function will echo out your message
  # and pad it with # to let you now how verbose that message was
  squawk_lvl=$1
  shift
  squawk=$1
  shift
  squawk_opt=$@

  if [[ "$VERBOSITY" -ge "$squawk_lvl" ]] ; then
  count_squawk=0
    while [[ "$count_squawk" -lt "$squawk_lvl" ]]; do
      echo -n "#"
      count_squawk=`expr $count_squawk + 1`
    done
    echo " $squawk"
  fi
}

# Force NVM to load
# This is needed
# if the user has not reloaded their environment
# after installing nvm for the first time
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

: ${DO_JWT_DL:=y}

# Wait for kubectl and kube-dns to be initialized
$TRANSMUTE_REPO/w8s/kubectl.w8
$TRANSMUTE_REPO/w8s/kube-dns.w8

sleep 5
# Apply rbac for tiller
squawk 5 'create tiller service account'
kubectl create serviceaccount tiller --namespace kube-system
squawk 5 'create tiller rbac config'
kubectl apply -f $TRANSMUTE_REPO/components/helm/rbac-tiller-config.yaml

# Install openebs for generic storage
#kubash -n $this_cluster_name openebs
squawk 5 'create openebs operator'
kubectl apply -f https://raw.githubusercontent.com/openebs/openebs/master/k8s/openebs-operator.yaml

sleep 5
kubectl get pods

squawk 5 "Install helm"
helm init --service-account tiller
$TRANSMUTE_REPO/w8s/tiller.w8

squawk 5 "Apply storage classes for openebs"
kubectl apply -f https://raw.githubusercontent.com/openebs/openebs/master/k8s/openebs-storageclasses.yaml

# This taints the last node so it is unschedulable to normal k8s pods
# and then will be populated solely by ingress to ensure ingress is not blocked by any other process
#this_ingress_node=$(kubectl get nodes|awk '{print $1}'|tail -1)
#kubash -n $this_cluster_name taint_ingress $this_ingress_node

#squawk 5 "voyager for ingress"
#kubash -n $this_cluster_name voyager
#curl -fsSL \
#  https://raw.githubusercontent.com/appscode/voyager/6.0.0/hack/deploy/voyager.sh \
#  | bash -s -- --provider=$VOYAGER_PROVIDER
#kubectl create secret generic acme-account --from-literal=ACME_EMAIL=$ACME_EMAIL

# test tiller
kubectl get pods -n kube-system
sleep 10
kubectl get pods -n kube-system
sleep 10
kubectl get pods -n kube-system

squawk 5 "Ganache-cli"
helm install \
 --name=ganache \
 $TRANSMUTE_REPO/components/ganache/charts/ganache-cli/

$TRANSMUTE_REPO/w8s/generic.w8 ganache default

squawk 5 "ipfs"
squawk 6 "Storage class for ipfs"
kubectl apply -f \
 $TRANSMUTE_REPO/components/ipfs/openebs-ipfs.yaml

squawk 5 "Helm install ipfs"
helm install \
 stable/ipfs \
 --name decentralized-storage \
 --set \
 persistence.storageClass=openebs-ipfs,persistence.size=4Gi,persistence.enabled=true

squawk 5 "OpenFaaS"
squawk 6 "create namespaces"
kubectl create ns openfaas
kubectl create ns openfaas-fn
squawk 5 "OpenFaas Helmchart"
cd faas-netes/chart
#helm install openfaas openfaas/ \
#helm install openfaas/ \
  #--name faaster-blaster \
helm upgrade --install openfaas openfaas/ \
  --namespace openfaas \
  --set functionNamespace=openfaas-fn
cd $orig_pwd

#sleep 10

helm install stable/kong --name gateway

squawk 5 "spin up"
export MINIKUBE_IP=$(minikube ip)
export KONG_ADMIN_URL=$(PATH=$HOME/.transmute/bin:$PATH minikube service gateway-kong-admin --url | sed 's,http://,https://,g')
export KONG_PROXY_URL=$(PATH=$HOME/.transmute/bin:$PATH minikube service gateway-kong-proxy --url | sed 's,http://,https://,g')
export KONG_PROXY_PORT=$(PATH=$HOME/.transmute/bin:$PATH kubectl get service gateway-kong-proxy -o json | jq -r '.spec.ports[0].nodePort')
export KONG_HOST=$(echo $KONG_ADMIN_URL | sed 's!https://!!g' | cut -f1 -d:)
export KONG_PORT=$(echo $KONG_ADMIN_URL | sed 's!https://!!g' | cut -f2 -d:)

echo 'configure hosts'
squawk 5 "configure-hosts.sh"
echo "" | sudo tee -a /etc/hosts
echo "$(minikube ip)  transmute.minikube" | sudo tee -a /etc/hosts
echo "$(minikube ip)  ipfs.transmute.minikube" | sudo tee -a /etc/hosts
echo "$(minikube ip)  ganache.transmute.minikube" | sudo tee -a /etc/hosts
echo "" | sudo tee -a /etc/hosts

echo 'configure ganache'
squawk 5 "configure-kong-ganache.sh"

echo 'SETTING UP GANACHE'

squawk 5 "Get the service clusterIp for Kong to use."
export GANACHE_CLUSTER_IP=$(PATH=$HOME/.transmute/bin:$PATH kubectl get service ganache-ganache-cli -o json | jq -r '.spec.clusterIP');
echo "GANACHE_CLUSTER_IP $GANACHE_CLUSTER_IP"

countzero=0
echo "Waiting for ganache to launch on $KONG_ADMIN_URL..."
while ! nc -z $KONG_HOST $KONG_PORT; do
    if [[ "$countzero" -gt 200 ]]; then
      echo 'timeout'
      exit 1
    fi
    ((++countzero))
    sleep 1
done
echo "ganache launched"

squawk 9 "# Add Ganache API to Kong
curl -k -X POST \
  --url $KONG_ADMIN_URL/apis/ \
  --data 'name=ganache' \
  --data 'hosts=ganache.transmute.minikube' \
  --data 'upstream_url=http://'$GANACHE_CLUSTER_IP':8545/'"
squawk 5 "Add Ganache API to Kong"
curl -k -X POST \
  --url $KONG_ADMIN_URL/apis/ \
  --data 'name=ganache' \
  --data 'hosts=ganache.transmute.minikube' \
  --data 'upstream_url=http://'$GANACHE_CLUSTER_IP':8545/' \
  | jq -r '.'

squawk 3 'GANACHE HEALTHCHECK'
squawk 3 "https://ganache.transmute.minikube:$KONG_PROXY_PORT"

curl -k -X POST \
  --url "https://ganache.transmute.minikube:$KONG_PROXY_PORT/ganache" \
  --data '{"jsonrpc":"2.0","method":"web3_clientVersion","params":[],"id":68}' \
  | jq -r '.'

squawk 3 'configure ipfs'
squawk 5 "configure-kong-ipfs.sh"

squawk 3 'SETTING UP IPFS'

squawk 5 "Get the service clusterIp for Kong to use."
export IPFS_CLUSTER_IP=$(PATH=$HOME/.transmute/bin:$PATH kubectl get service decentralized-storage-ipfs -o json | jq -r '.spec.clusterIP');

squawk 5 "Add IPFS API to Kong"
curl -k -X POST \
  --url $KONG_ADMIN_URL/apis/ \
  --data 'name=ipfs' \
  --data 'hosts=ipfs.transmute.minikube' \
  --data "https_only=true" \
  --data 'upstream_url=http://'$IPFS_CLUSTER_IP':5001/' \
  | jq '.'

squawk 5 "Configure CORS for IPFS via Kong"
curl -k -X POST \
  --url $KONG_ADMIN_URL/apis/ipfs/plugins \
  --data "name=cors" \
  --data "config.origins=*" \
  --data "config.methods=GET, PUT, POST" \
  | jq '.'

squawk 3 'IPFS HEALTHCHECK'
squawk 3 'https://ipfs.transmute.minikube:'$KONG_PROXY_PORT

curl -k -X GET \
  --url 'https://ipfs.transmute.minikube:'$KONG_PROXY_PORT'/api/v0/id' \
  | jq '.'

if [[ "$DO_JWT_DL" == 'y' ]]; then
  squawk 3 'configure okta'
  #$TRANSMUTE_REPO/scripts/configure-kong-okta-ipfs.sh

  squawk 3 'Configure Kong to use Okta to secure IPFS'

  curl -k -X POST $KONG_ADMIN_URL/apis/ipfs/plugins \
      --data "name=jwt"

  # How to delete a plugin.
  # Get the plugin id from the api
  # curl -k -X GET $KONG_ADMIN_URL/apis/ipfs/plugins 
  # Delete it from the api
  # curl -k -X DELETE $KONG_ADMIN_URL/apis/ipfs/plugins/e9522844-ef05-45b1-b3fa-09f380d4c0ec

  squawk 3 'Export CONSUMER_ID'
  export CONSUMER_ID=$(curl -k -X POST $KONG_ADMIN_URL/consumers \
      --data "username=bob@example.com" \
      --data "custom_id=0" \
      | jq -r '.id')

  squawk 5 "Download JWT Signing Key"
  squawk 3  'Download JWT Signing Key'
  squawk 3 'Using vox'
  node ./scripts/okta/write-okta-pem.js

  squawk 5 "Connect the API Consumer to okta"
  squawk 3 'Connect the API Consumer to okta'
  curl -k -X POST $KONG_ADMIN_URL/consumers/$CONSUMER_ID/jwt \
      -F "algorithm=RS256" \
      -F "rsa_public_key=@./scripts/okta/okta.pem" \
      -F "key=https://"$OKTA_HOSTNAME"/oauth2/default"

  squawk 5 "Get an okta jwt"
  squawk 3 'Get an okta jwt'
  export ACCESS_TOKEN=$(node ./scripts/okta/get-okta-token.js)

  squawk 3 'Get api v0 id'
  curl -k -X GET \
      --url 'https://ipfs.transmute.minikube:'$KONG_PROXY_PORT/api/v0/id \
      --header 'Authorization: Bearer '$ACCESS_TOKEN
fi

#####
squawk 5 "configure-framework-kong.sh"
squawk 3 'UPDATE PACKAGES transmute-config/env.json'


squawk 5 "TESTING"

# export OLD_KONG_PROXY_PORT=32443
# export NEW_KONG_PROXY_PORT=11111

# export OLD_KONG_PROXY_PORT=11111
# export NEW_KONG_PROXY_PORT=32443

# REAL
export OLD_KONG_PROXY_PORT=32443
export NEW_KONG_PROXY_PORT=$KONG_PROXY_PORT

export FRAMEWORK_CONFIG=`pwd`/packages/transmute-framework/src/transmute-config/env.json
export DASHBOARD_CONFIG=`pwd`/packages/transmute-dashboard/src/transmute-config/env.json

find $FRAMEWORK_CONFIG -type f | xargs sed -i 's/'$OLD_KONG_PROXY_PORT'/'$NEW_KONG_PROXY_PORT'/g'
find $DASHBOARD_CONFIG -type f | xargs sed -i 's/'$OLD_KONG_PROXY_PORT'/'$NEW_KONG_PROXY_PORT'/g'

curl -k -X GET \
    --url $KONG_ADMIN_URL/apis \
    | jq '.'
